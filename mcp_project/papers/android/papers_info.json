{
  "1611.00837v1": {
    "title": "Context-aware System Service Call-oriented Symbolic Execution of Android Framework with Application to Exploit Generation",
    "authors": [
      "Lannan Luo",
      "Qiang Zeng",
      "Chen Cao",
      "Kai Chen",
      "Jian Liu",
      "Limin Liu",
      "Neng Gao",
      "Min Yang",
      "Xinyu Xing",
      "Peng Liu"
    ],
    "summary": "Android Framework is a layer of software that exists in every Android system\nmanaging resources of all Android apps. A vulnerability in Android Framework\ncan lead to severe hacks, such as destroying user data and leaking private\ninformation. With tens of millions of Android devices unpatched due to Android\nfragmentation, vulnerabilities in Android Framework certainly attract attackers\nto exploit them. So far, enormous manual effort is needed to craft such\nexploits. To our knowledge, no research has been done on automatic generation\nof exploits that take advantage of Android Framework vulnerabilities. We make a\nfirst step towards this goal by applying symbolic execution of Android\nFramework to finding bugs and generating exploits. Several challenges have been\nraised by the task. (1) The information of an app flows to Android Framework in\nmultiple intricate steps, making it difficult to identify symbolic inputs. (2)\nAndroid Framework has a complex initialization phase, which exacerbates the\nstate space explosion problem. (3) A straightforward design that builds the\nsymbolic executor as a layer inside the Android system will not work well: not\nonly does the implementation have to ensure the compatibility with the Android\nsystem, but it needs to be maintained whenever Android gets updated. We present\nnovel ideas and techniques to resolve the challenges, and have built the first\nsystem for symbolic execution of Android Framework. It fundamentally changes\nthe state of the art in exploit generation on the Android system, and has been\napplied to constructing new techniques for finding vulnerabilities.",
    "pdf_url": "http://arxiv.org/pdf/1611.00837v1",
    "published": "2016-11-02"
  },
  "1209.0687v1": {
    "title": "Security Issues in the Android Cross-Layer Architecture",
    "authors": [
      "Alessandro Armando",
      "Alessio Merlo",
      "Luca Verderame"
    ],
    "summary": "The security of Android has been recently challenged by the discovery of a\nnumber of vulnerabilities involving different layers of the Android stack. We\nargue that such vulnerabilities are largely related to the interplay among\nlayers composing the Android stack. Thus, we also argue that such interplay has\nbeen underestimated from a security point-of-view and a systematic analysis of\nthe Android interplay has not been carried out yet. To this aim, in this paper\nwe provide a simple model of the Android cross-layer interactions based on the\nconcept of flow, as a basis for analyzing the Android interplay. In particular,\nour model allows us to reason about the security implications associated with\nthe cross-layer interactions in Android, including a recently discovered\nvulnerability that allows a malicious application to make Android devices\ntotally unresponsive. We used the proposed model to carry out an empirical\nassessment of some flows within the Android cross-layered architecture. Our\nexperiments indicate that little control is exercised by the Android Security\nFramework (ASF) over cross-layer interactions in Android. In particular, we\nobserved that the ASF lacks in discriminating the originator of a flow and\nsensitive security issues arise between the Android stack and the Linux kernel,\nthereby indicating that the attack surface of the Android platform is wider\nthan expected.",
    "pdf_url": "http://arxiv.org/pdf/1209.0687v1",
    "published": "2012-09-04"
  },
  "1302.5109v1": {
    "title": "Capturing Information Flows inside Android and Qemu Environments",
    "authors": [
      "Marco Sironi",
      "Francesco Tisato"
    ],
    "summary": "The smartphone market has grown so wide that it assumed a strategic\nrelevance. Today the most common smartphone OSs are Google's Android and\nApple's iOS. The former is particularly interesting due to its open source\nnature, that allows everyone to deeply inspect every aspect of the OS. Android\nsource code is also bundled with an hardware emulator, based on the open source\nsoftware Qemu, that allows the user to run the Android OS without the need of a\nphysical device. We first present a procedure to extract information flows from\na generic system. We then focus on Android and Qemu architectures and their\nlogging infrastructures. Finally, we detail what happens inside an Android\ndevice in a particular scenario: the system boot.",
    "pdf_url": "http://arxiv.org/pdf/1302.5109v1",
    "published": "2013-02-20"
  },
  "2107.01927v1": {
    "title": "Android Malware Category and Family Detection and Identification using Machine Learning",
    "authors": [
      "Ahmed Hashem El Fiky",
      "Ayman El Shenawy",
      "Mohamed Ashraf Madkour"
    ],
    "summary": "Android malware is one of the most dangerous threats on the internet, and\nit's been on the rise for several years. Despite significant efforts in\ndetecting and classifying android malware from innocuous android applications,\nthere is still a long way to go. As a result, there is a need to provide a\nbasic understanding of the behavior displayed by the most common Android\nmalware categories and families. Each Android malware family and category has a\ndistinct objective. As a result, it has impacted every corporate area,\nincluding healthcare, banking, transportation, government, and e-commerce. In\nthis paper, we presented two machine-learning approaches for Dynamic Analysis\nof Android Malware: one for detecting and identifying Android Malware\nCategories and the other for detecting and identifying Android Malware\nFamilies, which was accomplished by analyzing a massive malware dataset with 14\nprominent malware categories and 180 prominent malware families of\nCCCS-CIC-AndMal2020 dataset on Dynamic Layers. Our approach achieves in Android\nMalware Category detection more than 96 % accurate and achieves in Android\nMalware Family detection more than 99% accurate. Our approach provides a method\nfor high-accuracy Dynamic Analysis of Android Malware while also shortening the\ntime required to analyze smartphone malware.",
    "pdf_url": "http://arxiv.org/pdf/2107.01927v1",
    "published": "2021-07-05"
  },
  "1404.1395v1": {
    "title": "Android Security Framework: Enabling Generic and Extensible Access Control on Android",
    "authors": [
      "Michael Backes",
      "Sven Bugiel",
      "Sebastian Gerling",
      "Philipp von Styp-Rekowsky"
    ],
    "summary": "We introduce the Android Security Framework (ASF), a generic, extensible\nsecurity framework for Android that enables the development and integration of\na wide spectrum of security models in form of code-based security modules. The\ndesign of ASF reflects lessons learned from the literature on established\nsecurity frameworks (such as Linux Security Modules or the BSD MAC Framework)\nand intertwines them with the particular requirements and challenges from the\ndesign of Android's software stack. ASF provides a novel security API that\nsupports authors of Android security extensions in developing their modules.\nThis overcomes the current unsatisfactory situation to provide security\nsolutions as separate patches to the Android software stack or to embed them\ninto Android's mainline codebase. As a result, ASF provides different practical\nbenefits such as a higher degree of acceptance, adaptation, and maintenance of\nsecurity solutions than previously possible on Android. We present a\nprototypical implementation of ASF and demonstrate its effectiveness and\nefficiency by modularizing different security models from related work, such as\ncontext-aware access control, inlined reference monitoring, and type\nenforcement.",
    "pdf_url": "http://arxiv.org/pdf/1404.1395v1",
    "published": "2014-04-04"
  }
}